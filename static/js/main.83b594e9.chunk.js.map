{"version":3,"sources":["components/Search.js","api/axiosclient.js","components/ImageCard.js","components/ImageList.js","App.js","serviceWorker.js","index.js"],"names":["Search","props","Form","FormGroup","Input","type","placeholder","id","name","onChange","onUserInput","onKeyDown","event","key","preventDefault","onSubmit","Button","color","onClick","block","axios","create","baseURL","headers","ImageCard","setSpans","h","imageRef","current","clientHeight","setState","spans","Math","ceil","state","createRef","this","addEventListener","image","description","urls","style","gridRowEnd","ref","alt","src","small","Component","Images","imageEls","images","map","className","App","keyword","imagesList","e","get","params","query","per_page","response","data","results","target","value","bind","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8TAsBeA,EAnBA,SAACC,GAQZ,OACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAOC,KAAK,OAAOC,YAAY,0CAA0CC,GAAG,UAAUC,KAAK,UAAUC,SAAUR,EAAMS,YACrHC,UAVM,SAACC,GACE,UAAdA,EAAMC,MACLD,EAAME,iBACNb,EAAMc,gBASN,kBAACC,EAAA,EAAD,CAAQC,MAAM,OAAOC,QAASjB,EAAMc,SAAUI,OAAK,GAAnD,a,QCdGC,E,OAAAA,EAAMC,OAAO,CACxBC,QAAQ,4BACRC,QAAQ,CACJ,cAAiB,qCCsBVC,G,kBAzBX,WAAYvB,GAAQ,IAAD,8BACf,4CAAMA,KASVwB,SAAW,WACR,IAAMC,EAAI,EAAKC,SAASC,QAAQC,aAC/B,EAAKC,SAAS,CAACC,MAAOC,KAAKC,KAAKP,EAAI,OAVpC,EAAKQ,MAAQ,CAACH,MAAM,GACpB,EAAKJ,SAAWQ,sBAHD,E,iFAOfC,KAAKT,SAASC,QAAQS,iBAAiB,OAAQD,KAAKX,Y,+BAO9C,IAAD,EACyBW,KAAKnC,MAAMqC,MAAjCC,EADH,EACGA,YAAaC,EADhB,EACgBA,KAErB,OACI,yBAAKC,MAAS,CAACC,WAAW,QAAD,OAAUN,KAAKF,MAAMH,SAC1C,yBAAMY,IAAKP,KAAKT,SAAUiB,IAAKL,EAAaM,IAAKL,EAAKM,a,GApB9CC,cCWTC,EAVA,SAAC/C,GACZ,IAAMgD,EAAWhD,EAAMiD,OAAOC,KAAI,SAACb,GAC/B,OAAO,kBAAC,EAAD,CAAYA,MAAOA,EAAOzB,IAAKyB,EAAM/B,QAEhD,OACA,yBAAK6C,UAAU,cAAcH,ICFZI,E,2MAEjBnB,MAAQ,CAACoB,QAAQ,GAAIC,WAAW,I,iHAEjBC,G,uFACUpC,EAAMqC,IAAI,iBAAkB,CAC7CC,OAAQ,CACJC,MAAOvB,KAAKF,MAAMoB,QAClBM,SAAU,M,OAHdC,E,OAMJzB,KAAKN,SAAS,CAACyB,WAAYM,EAASC,KAAKC,U,yIAGjCP,GACRpB,KAAKN,SAAS,CAACwB,QAAQE,EAAEQ,OAAOC,U,+BAIhC,OACI,yBAAKb,UAAU,iBACX,kBAAC,EAAD,CAAQ1C,YAAa0B,KAAK1B,YAAYwD,KAAK9B,MAAOrB,SAAUqB,KAAKrB,SAASmD,KAAK9B,QAC/E,kBAAC,EAAD,CAAQc,OAAQd,KAAKF,MAAMqB,kB,GAtBVR,aCMboB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.83b594e9.chunk.js","sourcesContent":["import React from 'react';\r\nimport {Form, FormGroup, Input, Button} from 'reactstrap';\r\n\r\nconst Search = (props) => {\r\n\r\n    const onKeyDown = (event) => {\r\n        if(event.key === \"Enter\") {\r\n            event.preventDefault();\r\n            props.onSubmit();\r\n        }\r\n    }\r\n    return (\r\n        <Form >\r\n            <FormGroup>\r\n                <Input type=\"text\" placeholder=\"Enter your keyword to search for images\" id=\"keyword\" name=\"keyword\" onChange={props.onUserInput} \r\n                onKeyDown={onKeyDown}></Input>\r\n            </FormGroup>\r\n            <Button color=\"info\" onClick={props.onSubmit} block>Splash!</Button>\r\n        </Form>\r\n    )\r\n};\r\n\r\nexport default Search;","import axios from 'axios';\r\n\r\n\r\nexport default axios.create({\r\n    baseURL:'https://api.unsplash.com/',\r\n    headers:{\r\n        'Authorization': 'Client-ID <UnSplash ACCESS_KEY>'\r\n    }\r\n})","import React, { Component, createRef } from 'react';\r\n\r\nclass ImageCard extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {spans:0};\r\n        this.imageRef = createRef();\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.imageRef.current.addEventListener('load', this.setSpans);\r\n    }\r\n\r\n    setSpans = () => {\r\n       const h = this.imageRef.current.clientHeight;\r\n        this.setState({spans: Math.ceil(h / 10)})\r\n    }\r\n    render() {\r\n        const { description, urls } = this.props.image;\r\n\r\n        return (\r\n            <div style = {{gridRowEnd: `span ${this.state.spans}`}}>\r\n                <img  ref={this.imageRef} alt={description} src={urls.small} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ImageCard;","import React from 'react';\r\nimport './ImageList.css';\r\nimport ImageCard from './ImageCard';\r\nconst Images = (props) => {\r\n    const imageEls = props.images.map((image)=> {\r\n        return <ImageCard  image={image} key={image.id}/>\r\n    })\r\n    return (\r\n    <div className=\"image-list\">{imageEls}</div>\r\n   \r\n    )\r\n}\r\n\r\nexport default Images;","import React, { Component } from 'react';\r\n// import FileBase64 from 'react-file-base64';\r\nimport Search from './components/Search';\r\nimport axios from './api/axiosclient';\r\nimport Images from './components/ImageList';\r\n\r\nexport default class App extends Component {\r\n\r\n    state = {keyword:'', imagesList:[]}\r\n\r\n    async onSubmit(e) {\r\n        let response = await axios.get('/search/photos', {\r\n            params: {\r\n                query: this.state.keyword,\r\n                per_page: 15\r\n            }\r\n        });\r\n        this.setState({imagesList: response.data.results})\r\n    }\r\n\r\n    onUserInput(e) {\r\n        this.setState({keyword:e.target.value})\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container p-5\">\r\n                <Search onUserInput={this.onUserInput.bind(this)} onSubmit={this.onSubmit.bind(this)}></Search>\r\n                <Images images={this.state.imagesList}/>\r\n            </div>\r\n        )\r\n    }\r\n}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App.js';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}